// commands/help.js
// ‡§¨‡•â‡§ü ‡§ï‡•á ‡§∏‡§≠‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏ ‡§ï‡•ã ‡§¶‡§ø‡§ñ‡§æ‡§§‡§æ ‡§π‡•à, aliases ke saath.

const { EmbedBuilder } = require('discord.js');

module.exports = {
    data: {
        name: 'help',
        description: '‡§∏‡§≠‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§Æ‡•ç‡§Ø‡•Ç‡§ú‡§ø‡§ï ‡§î‡§∞ ‡§Ø‡•Ç‡§ü‡§ø‡§≤‡§ø‡§ü‡•Ä ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏ ‡§¶‡§ø‡§ñ‡§æ‡§§‡§æ ‡§π‡•à‡•§',
        aliases: ['h', 'commands'] // Help ke liye aliases
    },
    
    /**
     * @param {object} context
     * @param {import('discord.js').Message} context.message
     * @param {import('../src/Client')} context.client
     * @param {string} context.prefix - Dynamically fetched prefix.
     */
    async execute({ message, client, prefix }) {
        // Command list banane ke liye mukhya names ka ek set banayein
        const uniqueCommands = new Map();
        
        // Commands ko iterate karein aur mukhya naam se group karein
        client.commands.forEach(command => {
            if (!uniqueCommands.has(command.data.name)) {
                uniqueCommands.set(command.data.name, command);
            }
        });

        const commandFields = Array.from(uniqueCommands.values()).map(command => {
            const name = command.data.name;
            const aliases = command.data.aliases || [];
            
            // Aliases string banao
            const aliasStr = aliases.length > 0 ? ` (Aliases: ${aliases.map(a => `${prefix}${a}`).join(', ')})` : '';

            return {
                name: `${prefix}${name}${aliasStr}`,
                value: command.data.description,
                inline: false,
            };
        });

        const helpEmbed = new EmbedBuilder()
            .setColor(0x3498DB)
            .setTitle('üé∂ Discord Music Bot Commands')
            .setDescription(`‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§∏‡§∞‡•ç‡§µ‡§∞ prefix ‡§π‡•à: \`${prefix}\`\n\n‡§∏‡§≠‡•Ä ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏ ‡§®‡•Ä‡§ö‡•á ‡§∏‡•Ç‡§ö‡•Ä‡§¨‡§¶‡•ç‡§ß ‡§π‡•à‡§Ç:`)
            .setFields(commandFields)
            .setFooter({ text: '‡§∏‡§Ç‡§ó‡•Ä‡§§ ‡§ö‡§≤‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è !play <URL/Search>' });

        await message.reply({ embeds: [helpEmbed] });
    }
};
